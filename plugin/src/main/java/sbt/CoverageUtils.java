package sbt;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.FileUtils;

import jscover.Main;
import jscover.util.IoUtils;

public class CoverageUtils {

	public String sourcePath;
	public String destinationPath;
	public String reportsPath;
	public String noInstrumentPaths;
	
	public void init(String sourcePath, String destinationPath, String reportsPath, String noInstrumentPaths) {
		this.sourcePath = sourcePath;
		this.destinationPath = destinationPath;
		this.reportsPath = reportsPath;
		this.noInstrumentPaths = noInstrumentPaths;
	}
	
	private void prepareToGenerateInstrumentedCode() {
		try {
			File f = new File(destinationPath);
			if (f.exists()) {
				FileUtils.deleteDirectory(f);
			}
			f = new File(reportsPath);
			if (f.exists()) {
				FileUtils.deleteDirectory(f);
			}
			f.mkdirs();
		} catch (IOException e) {
			System.out.println(e.getMessage());
			throw new RuntimeException(e);
		}
	}
	
	public void generateInstrumentedCode() throws IOException {
		prepareToGenerateInstrumentedCode();
		String[] args;
		if (noInstrumentPaths != null && noInstrumentPaths.length() > 0) {
			String[] paths = noInstrumentPaths.split(",");
			List<String> argsList = new ArrayList<String>();
			argsList.add("-fs");
			argsList.add("--local-storage");
			for (String path : paths) {
				argsList.add("--no-instrument=" + path);
			}
			argsList.add(sourcePath);
			argsList.add(destinationPath);
			args = argsList.toArray(new String[]{});
		} else {
			args = new String[]{
		        "-fs",
		        "--local-storage",
		        sourcePath,
		        destinationPath
		    };
		}
        new Main().runMain(args);
	}
	
	public void generateRouteForDestination() {
		File routes = new File("conf/routes");
		String newRoute = "GET    " + destinationPath.replace("public", "") + 
				"/*file    controllers.Assets.at(path=\"/" + destinationPath + "\", file)";
		try {
			if (routes.exists() && !FileUtils.readFileToString(routes).contains(newRoute)) {
				PrintWriter out = new PrintWriter(new BufferedWriter(
						new FileWriter(routes, true)));
				out.println(System.getProperty("line.separator"));
				out.println("# This route was generated by jscover-sbt-plugin");
				out.println(newRoute);
			    out.flush();
			    out.close();
			}
		} catch (IOException e) {
			System.out.println(e.getMessage());
			throw new RuntimeException(e);
		}
	}
	
	public void mergeJsonReports() {
		prepareToMergeReports();
		File reportsDir = new File(reportsPath);
		if (!reportsDir.exists()) {
			throw new RuntimeException("Reports directory does not exist");
		} else {
			if (reportsDir.listFiles().length == 1) {
				File src = new File(reportsDir.listFiles()[0].getAbsolutePath(), "jscoverage.json");
				if (src.exists()) {
					File dst = new File(destinationPath, "jscoverage.json");
					IoUtils ioUtils = new IoUtils();
					ioUtils.copy(src, dst);	
				}
			} else if (reportsDir.listFiles().length > 1) {
				List<String> args = new ArrayList<String>();
				args.add("--merge");
				for (File file : reportsDir.listFiles()) {
					if (file.isDirectory()) {
						args.add(file.getAbsolutePath());
					}
				}
				//the last arg is the destination
				args.add(new File(destinationPath).getAbsolutePath());
				try {
					jscover.report.Main.main(args.toArray(new String[args.size()]));
				} catch (IOException e) {
					System.out.println(e.getMessage());
					throw new RuntimeException(e);
				}
			}
		}
		try(PrintWriter out = new PrintWriter(new BufferedWriter(
				new FileWriter(destinationPath + "/jscoverage.js", true)))) {
		    out.println("jscoverage_isReport = true;");
		    out.flush();
		    out.close();
		}catch (IOException e) {
			System.out.println(e.getMessage());
			throw new RuntimeException(e);
		}
	}
	
	private void prepareToMergeReports() {
		File reportsDir = new File(reportsPath);
		for (File file : reportsDir.listFiles()) {
			if (file.isDirectory()) {
				try {
					FileUtils.copyDirectory(new File(destinationPath, "original-src"), new File(file, "original-src"));
				} catch (IOException e) {
					System.out.println(e.getMessage());
					throw new RuntimeException(e);
				}
			}
		}
	}
}
